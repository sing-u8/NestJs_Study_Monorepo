---
description:
globs:
alwaysApply: true
---
use context7
use pnpm package manager

general implementation order: Domain → Application → Infrastructure → Presentation

- actual hybrid implementation approach
Phase 1 - 기반 설정:
1. 환경 변수 설정 (DB, JWT, Config)
2. 데이터베이스 연결
3. 기본 모듈 구조
4. TypeORM 엔티티 (스키마 정의)

Phase 2 - 도메인 핵심:
5. 도메인 엔티티 & 값 객체 정의
6. 리포지토리 인터페이스
7. 도메인 예외

Phase 3 - 애플리케이션 로직:
8. 애플리케이션 서비스
9. DTO 정의

Phase 4 - 인프라 구현:
10. 리포지토리 구현체
11. 외부 서비스 (JWT, 소셜 로그인)

Phase 5 - API 계층:
12. 컨트롤러
13. 가드 & 데코레이터
14. 예외 필터

- 도메인 설계
-- 도메인 엔티티와 값 객체 정의
--  비즈니스 규칙 구현

- 기능별 수직적 구현
-- 회원가입 API → 애플리케이션 서비스 → 리포지토리 → 테스트


- auth-VC folder structure
apps/auth-vC/src/
├── app/
│   ├── app.module.ts
│   └── app.controller.ts
├── auth/                              # Auth 도메인 루트
│   ├── application/                   # 애플리케이션 계층
│   │   ├── service/                  # 애플리케이션 서비스
│   │   │   ├── auth.service.ts
│   │   │   ├── user.service.ts
│   │   │   ├── jwt.service.ts
│   │   │   ├── password.service.ts
│   │   │   └── social-auth.service.ts
│   │   ├── dto/                       # 애플리케이션 DTO
│   │   │   ├── auth.dto.ts
│   │   │   ├── user.dto.ts
│   │   │   └── social-auth.dto.ts
│   │   └── event/                    # 도메인 이벤트
│   │       ├── handler/              # 이벤트 핸들러
│   │       │   ├── user-registered.handler.ts
│   │       │   ├── user-logged-in.handler.ts
│   │       │   └── user-deleted.handler.ts
│   │       └── event/                # 이벤트 클래스
│   │           ├── user-registered.event.ts
│   │           ├── user-logged-in.event.ts
│   │           └── user-deleted.event.ts
│   ├── domain/                        # 도메인 계층
│   │   ├── entity/                  # 도메인 엔티티
│   │   │   ├── user.entity.ts
│   │   │   └── refresh-token.entity.ts
│   │   ├── vo/             # 값 객체
│   │   │   ├── email.vo.ts
│   │   │   ├── password.vo.ts
│   │   │   ├── provider.vo.ts
│   │   │   └── user-id.vo.ts
│   │   ├── repository/              # 리포지토리 인터페이스
│   │   │   ├── user.repository.interface.ts
│   │   │   └── refresh-token.repository.interface.ts
│   │   ├── service/                  # 도메인 서비스
│   │   │   ├── user.domain.service.ts
│   │   │   └── password.domain.service.ts
│   │   └── exception/                # 도메인 예외
│   │       ├── user-already-exists.exception.ts
│   │       ├── invalid-credentials.exception.ts
│   │       ├── user-not-found.exception.ts
│   │       └── invalid-refresh-token.exception.ts
│   ├── infrastructure/                # 인프라스트럭처 계층
│   │   ├── database/
│   │   │   ├── entity/              # TypeORM 엔티티
│   │   │   │   ├── user.typeorm.entity.ts
│   │   │   │   └── refresh-token.typeorm.entity.ts
│   │   │   ├── repository/          # 리포지토리 구현체
│   │   │   │   ├── user.typeorm.repository.ts
│   │   │   │   └── refresh-token.typeorm.repository.ts
│   │   │   ├── migration/            # 데이터베이스 마이그레이션
│   │   │   │   ├── 1234567890-create-users-table.ts
│   │   │   │   └── 1234567891-create-refresh-tokens-table.ts
│   │   │   └── seeds/                 # 시드 데이터
│   │   │       └── user.seed.ts
│   │   ├── external-service/         # 외부 서비스
│   │   │   ├── google-auth.service.ts
│   │   │   ├── apple-auth.service.ts
│   │   │   └── email.service.ts
│   │   ├── guard/                    # 가드
│   │   │   ├── jwt-auth.guard.ts
│   │   │   ├── refresh-token.guard.ts
│   │   │   └── optional-auth.guard.ts
│   │   ├── strategy/                # Passport 전략
│   │   │   ├── jwt.strategy.ts
│   │   │   ├── refresh-token.strategy.ts
│   │   │   ├── google.strategy.ts
│   │   │   └── apple.strategy.ts
│   │   └── config/                    # 설정
│   │       ├── database.config.ts
│   │       ├── jwt.config.ts
│   │       └── social-auth.config.ts
│   └── presentation/                  # 프레젠테이션 계층
│       ├── controller/
│       │   ├── auth.controller.ts
│       │   ├── user.controller.ts
│       │   └── social-auth.controller.ts
│       ├── dto/                       # 요청/응답 DTO
│       │   ├── requests/
│       │   │   ├── signup.request.dto.ts
│       │   │   ├── login.request.dto.ts
│       │   │   ├── refresh-token.request.dto.ts
│       │   │   └── social-login.request.dto.ts
│       │   └── responses/
│       │       ├── auth.response.dto.ts
│       │       ├── user.response.dto.ts
│       │       └── token.response.dto.ts
│       ├── decorator/                # 커스텀 데코레이터
│       │   ├── current-user.decorator.ts
│       │   ├── public.decorator.ts
│       │   └── roles.decorator.ts
│       ├── filter/                   # 예외 필터
│       │   ├── auth-exception.filter.ts
│       │   └── domain-exception.filter.ts
│       └── interceptor/              # 인터셉터
│           ├── response.interceptor.ts
│           └── logging.interceptor.ts
├── shared/                            # 공통 모듈
│   ├── interface/
│   │   ├── repository.interface.ts
│   │   └── service.interface.ts
│   ├── type/
│   │   ├── auth.types.ts
│   │   └── common.types.ts
│   ├── constant/
│   │   ├── auth.constants.ts
│   │   └── app.constants.ts
│   ├── util/
│   │   ├── hash.util.ts
│   │   ├── token.util.ts
│   │   └── validation.util.ts
│   └── enum/
│       ├── provider.enum.ts
│       └── user-status.enum.ts
├── config/                            # 전역 설정
│   ├── app.config.ts
│   ├── database.config.ts
│   └── env.validation.ts
└── main.ts



# 구현 상황
# 🚀 NestJS Clean Architecture Auth System - Step 1 완료 현황

## 📋 프로젝트 개요

- **목표**: NestJS + 클린 아키텍처를 사용한 인증 시스템 구현
- **기능**: 회원가입, 로그인(일반/소셜), 로그아웃, 회원탈퇴
- **데이터베이스**: PostgreSQL + TypeORM
- **아키텍처**: CQRS 없는 클린 아키텍처 (Domain → Application → Infrastructure → Presentation)

## ✅ Phase 1: 기반 설정 완료 내역

### 1. 환경 변수 관리 시스템

```typescript
// apps/auth-vC/src/config/env.validation.ts
- Joi 기반 환경 변수 검증 스키마
- TypeScript 타입 정의 (EnvironmentVariables)
- 필수/선택 환경 변수 구분
- 개발/프로덕션 환경 구분
```

**포함된 환경 변수:**

- DATABASE\_\* (PostgreSQL 연결 정보)
- JWT_SECRET, REFRESH_TOKEN_SECRET (토큰 시크릿)
- GOOGLE*\*, APPLE*\* (소셜 로그인 설정)
- PORT, NODE_ENV (애플리케이션 설정)

### 2. 데이터베이스 설정

```typescript
// apps/auth-vC/src/config/database.config.ts
- TypeORM 설정 팩토리 (registerAs 사용)
- PostgreSQL 연결 설정
- 개발/테스트 환경별 설정 분리
- 연결 풀, SSL, 로깅 설정
- 엔티티 자동 로딩 경로 설정
```

### 3. JWT 토큰 시스템

```typescript
// apps/auth-vC/src/config/jwt.config.ts
- Access Token / Refresh Token 분리 설정
- 토큰 페이로드 타입 정의 (JwtPayload, RefreshTokenPayload)
- NestJS JWT 모듈 설정
- 발행자(issuer), 대상(audience) 설정
```

### 4. TypeORM 엔티티 (인프라스트럭처 계층)

```typescript
// apps/auth-vC/src/auth/infrastructure/database/entity/

// user.typeorm.entity.ts
- 사용자 기본 정보 (id, email, password_hash)
- 소셜 로그인 지원 (provider, provider_id)
- 계정 상태 관리 (is_active, is_email_verified)
- 활동 추적 (last_login_at, created_at, updated_at)
- 인덱스 최적화 (이메일, 소셜로그인 조회)

// refresh-token.typeorm.entity.ts
- 리프레시 토큰 관리 (token, expires_at)
- 사용자와 1:N 관계 (CASCADE 삭제)
- 보안 추적 (device_info, ip_address)
- 토큰 상태 관리 (is_active, last_used_at)
- 다중 디바이스 로그인 지원
```

### 5. 데이터베이스 마이그레이션

```typescript
// apps/auth-vC/src/auth/infrastructure/database/migration/

// 1234567890-create-users-table.ts
- users 테이블 생성
- 인덱스 설정 (이메일, 소셜로그인, 활성상태, 생성일)
- 제약조건 설정

// 1234567891-create-refresh-tokens-table.ts
- refresh_tokens 테이블 생성
- 외래키 제약조건 (users.id 참조, CASCADE 삭제)
- 복합 인덱스 (사용자별 활성 토큰 조회 최적화)
- 토큰 만료 정리를 위한 인덱스
```

### 6. 애플리케이션 설정

```typescript
// apps/auth-vC/src/app/app.module.ts
- ConfigModule 전역 설정 (Joi 검증)
- TypeORM 모듈 설정 (비동기 설정)
- JwtModule 전역 설정
- EventEmitterModule 준비 (주석 처리)

// apps/auth-vC/src/main.ts
- ValidationPipe 전역 설정 (DTO 검증)
- CORS 설정 (개발/프로덕션 구분)
- 글로벌 프리픽스 (/api)
- 우아한 종료 설정
```

## 📁 현재 폴더 구조

```
apps/auth-vC/src/
├── config/                     # 전역 설정
│   ├── env.validation.ts       ✅ 환경변수 검증
│   ├── database.config.ts      ✅ DB 설정
│   └── jwt.config.ts          ✅ JWT 설정
├── auth/
│   └── infrastructure/
│       └── database/
│           ├── entity/       # TypeORM 엔티티
│           │   ├── user.typeorm.entity.ts          ✅
│           │   └── refresh-token.typeorm.entity.ts ✅
│           └── migration/     # DB 스키마 버전 관리
│               ├── 1234567890-create-users-table.ts        ✅
│               └── 1234567891-create-refresh-tokens-table.ts ✅
├── app/
│   └── app.module.ts          ✅ 루트 모듈 (업데이트됨)
└── main.ts                    ✅ 애플리케이션 부트스트랩
```

## 🗄️ 데이터베이스 스키마

```sql
-- Users 테이블
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255),                    -- 소셜 로그인시 NULL
  provider VARCHAR(50) DEFAULT 'local',          -- 'local', 'google', 'apple'
  provider_id VARCHAR(255),                      -- 소셜 로그인 ID
  is_active BOOLEAN DEFAULT true,
  is_email_verified BOOLEAN DEFAULT false,
  last_login_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Refresh Tokens 테이블
CREATE TABLE refresh_tokens (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  token VARCHAR(255) UNIQUE NOT NULL,
  expires_at TIMESTAMP NOT NULL,
  device_info VARCHAR(255),                      -- 디바이스 추적
  ip_address VARCHAR(45),                        -- IPv6 지원
  is_active BOOLEAN DEFAULT true,
  last_used_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## 🔧 필요한 환경 변수 (.env)

```env
# 데이터베이스
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_USERNAME=postgres
DATABASE_PASSWORD=password
DATABASE_NAME=auth_db

# JWT (32자 이상 권장)
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-32chars
JWT_EXPIRES_IN=1h
REFRESH_TOKEN_SECRET=your-super-secret-refresh-token-key-change-this-in-production-32chars
REFRESH_TOKEN_EXPIRES_IN=7d

# 소셜 로그인 (선택사항)
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_CALLBACK_URL=http://localhost:3000/api/auth/google/callback

# 애플리케이션
PORT=3000
NODE_ENV=development
```

## 🎯 다음 단계 (Step 2: 도메인 계층)

구현 예정:

1. **도메인 엔티티 & 값 객체**

   - `src/auth/domain/entity/user.entity.ts`
   - `src/auth/domain/vo/email.vo.ts`
   - `src/auth/domain/vo/password.vo.ts`
   - `src/auth/domain/vo/provider.vo.ts`

2. **리포지토리 인터페이스**

   - `src/auth/domain/repository/user.repository.interface.ts`
   - `src/auth/domain/repository/refresh-token.repository.interface.ts`

3. **도메인 예외**
   - `src/auth/domain/exception/user-already-exists.exception.ts`
   - `src/auth/domain/exception/invalid-credentials.exception.ts`
   - `src/auth/domain/exception/user-not-found.exception.ts`

## 🔍 핵심 설계 원칙

1. **클린 아키텍처**: 의존성 역전, 계층 분리
2. **타입 안전성**: TypeScript + Joi 검증
3. **보안**: JWT 분리, 환경변수 검증, 토큰 추적
4. **확장성**: 소셜 로그인 지원, 다중 디바이스
5. **유지보수**: 마이그레이션, 설정 분리, 문서화



# 🎯 NestJS Clean Architecture Auth System - Step 2 완료 현황

## 📋 Step 2: 도메인 계층 구현 개요

- **목표**: 도메인 엔티티, 값 객체, 리포지토리 인터페이스, 도메인 예외 구현
- **원칙**: 비즈니스 로직의 중심, 외부 의존성 없는 순수한 도메인 규칙
- **구조**: Entity → Value Object → Repository Interface → Domain Service → Exception

## ✅ Step 2: 도메인 계층 완료 내역

### 1. 공통 타입 및 열거형 (shared 폴더)

```typescript
// apps/auth-vC/src/shared/enum/
- provider.enum.ts          ✅ 인증 제공자 열거형 (LOCAL, GOOGLE, APPLE)
- user-status.enum.ts       ✅ 사용자 상태 열거형 (ACTIVE, INACTIVE, etc.)

// apps/auth-vC/src/shared/type/
- auth.types.ts             ✅ 인증 관련 타입 정의
- common.types.ts           ✅ 공통 인터페이스 및 타입
```

**주요 특징:**

- Provider 유틸리티 클래스로 제공자 검증 기능
- UserStatus 유틸리티 클래스로 상태 관리 기능
- 도메인 엔티티/값 객체 기본 인터페이스 정의
- 페이지네이션, 검색 옵션 타입 정의

### 2. 값 객체 (Value Objects)

```typescript
// apps/auth-vC/src/auth/domain/vo/

// email.vo.ts                ✅ 이메일 값 객체
- RFC 5321 표준 준수 (최대 254자)
- 이메일 형식 검증 (정규식)
- 대소문자 정규화 및 공백 제거
- 도메인/로컬 부분 추출 기능

// password.vo.ts             ✅ 비밀번호 값 객체
- 복잡성 요구사항 검증 (대소문자, 숫자, 특수문자)
- 최소/최대 길이 제한 (8-128자)
- 연속된 동일 문자 방지
- 비밀번호 강도 계산 (1-5점)

// provider.vo.ts             ✅ 인증 제공자 값 객체
- 지원되는 제공자만 허용
- 로컬/소셜 제공자 구분 기능
- 팩토리 메서드 제공

// user-id.vo.ts              ✅ 사용자 ID 값 객체
- UUID 형식 검증
- 새 ID 생성 기능
- 불변성 보장
```

### 3. 도메인 예외 (Domain Exceptions)

```typescript
// apps/auth-vC/src/auth/domain/exception/

// domain.exception.ts              ✅ 도메인 예외 기본 클래스
- 추상 클래스로 공통 예외 구조 정의
- 에러 코드, HTTP 상태 코드 포함
- JSON 직렬화 지원

// user-already-exists.exception.ts ✅ 사용자 중복 예외
- 409 상태 코드
- 이메일 정보 포함

// user-not-found.exception.ts      ✅ 사용자 미발견 예외
- 404 상태 코드
- ID/이메일 구분 지원

// invalid-credentials.exception.ts ✅ 잘못된 인증 정보 예외
- 401 상태 코드
- 로그인 실패 처리

// invalid-refresh-token.exception.ts ✅ 유효하지 않은 토큰 예외
- 401 상태 코드
- 토큰 실패 이유 포함
```

### 4. 도메인 엔티티 (Domain Entities)

```typescript
// apps/auth-vC/src/auth/domain/entity/

// user.entity.ts               ✅ 사용자 도메인 엔티티
- 로컬/소셜 계정 생성 팩토리 메서드
- 보안 강화: 오직 해시된 비밀번호만 저장 🔒
- 이메일 인증 처리
- 계정 상태 관리 (활성화/비활성화/정지)
- 로그인 시간 추적
- 비즈니스 규칙 검증

// refresh-token.entity.ts      ✅ 리프레시 토큰 도메인 엔티티
- 토큰 만료 검증
- 토큰 사용 기록 관리
- 토큰 갱신 로직
- 디바이스별 토큰 관리
- 보안 추적 기능
```

### 5. 리포지토리 인터페이스 (Repository Interfaces)

```typescript
// apps/auth-vC/src/auth/domain/repository/

// user.repository.interface.ts     ✅ 사용자 리포지토리 인터페이스
- CRUD 기본 operations
- 이메일/소셜 로그인 조회
- 존재 여부 확인
- 페이지네이션 지원
- 검색 및 필터링
- 상태 업데이트 메서드

// refresh-token.repository.interface.ts ✅ 리프레시 토큰 리포지토리 인터페이스
- 토큰 CRUD operations
- 사용자별 토큰 관리
- 디바이스별 토큰 조회
- 만료된 토큰 정리
- 토큰 사용 추적
- 토큰 개수 제한 지원
```

### 6. 도메인 서비스 (Domain Services)

```typescript
// apps/auth-vC/src/auth/domain/service/

// user.domain.service.ts       ✅ 사용자 도메인 서비스
- 복잡한 사용자 생성 로직
- 이메일 중복 검사 (로컬/소셜 통합)
- 사용자 인증 로직 (실제 비밀번호 해시 검증) 🔒
- 계정 연결/병합 로직
- 비밀번호 변경 (해시 업데이트) 🔒
- 계정 삭제 전 검증

// password.domain.service.ts   ✅ 비밀번호 도메인 서비스
- bcrypt 기반 해싱 (salt + pepper)
- 비밀번호 강도 평가
- 비밀번호 정책 검증
- 임시 비밀번호 생성
- 비밀번호 만료 관리
- 변경 주기 제한
```

## 📁 현재 폴더 구조 (Step 2 완료)

```
apps/auth-vC/src/
├── shared/                          # 공통 모듈
│   ├── enum/                        # 열거형
│   │   ├── provider.enum.ts         ✅ 인증 제공자
│   │   └── user-status.enum.ts      ✅ 사용자 상태
│   └── type/                        # 타입 정의
│       ├── auth.type.ts            ✅ 인증 관련 타입
│       └── common.type.ts          ✅ 공통 타입
├── auth/                            # Auth 도메인 루트
│   ├── domain/                      # 도메인 계층
│   │   ├── entity/                  # 도메인 엔티티
│   │   │   ├── user.entity.ts       ✅ 사용자 엔티티
│   │   │   ├── refresh-token.entity.ts ✅ 리프레시 토큰 엔티티
│   │   │   └── index.ts             ✅ 엔티티 export
│   │   ├── vo/                      # 값 객체
│   │   │   ├── email.vo.ts          ✅ 이메일 값 객체
│   │   │   ├── password.vo.ts       ✅ 비밀번호 값 객체
│   │   │   ├── provider.vo.ts       ✅ 제공자 값 객체
│   │   │   ├── user-id.vo.ts        ✅ 사용자 ID 값 객체
│   │   │   └── index.ts             ✅ 값 객체 export
│   │   ├── repository/              # 리포지토리 인터페이스
│   │   │   ├── user.repository.interface.ts         ✅ 사용자 리포지토리
│   │   │   ├── refresh-token.repository.interface.ts ✅ 토큰 리포지토리
│   │   │   └── index.ts             ✅ 리포지토리 export
│   │   ├── service/                 # 도메인 서비스
│   │   │   ├── user.domain.service.ts      ✅ 사용자 도메인 서비스
│   │   │   ├── password.domain.service.ts  ✅ 비밀번호 도메인 서비스
│   │   │   └── index.ts             ✅ 서비스 export
│   │   ├── exception/               # 도메인 예외
│   │   │   ├── domain.exception.ts  ✅ 기본 도메인 예외
│   │   │   ├── user-already-exists.exception.ts     ✅ 사용자 중복 예외
│   │   │   ├── user-not-found.exception.ts          ✅ 사용자 미발견 예외
│   │   │   ├── invalid-credentials.exception.ts     ✅ 잘못된 인증 정보 예외
│   │   │   ├── invalid-refresh-token.exception.ts   ✅ 유효하지 않은 토큰 예외
│   │   │   └── index.ts             ✅ 예외 export
│   │   └── index.ts                 ✅ 도메인 계층 전체 export
│   └── infrastructure/              # 인프라스트럭처 계층 (Step 1 완료)
│       └── database/
│           ├── entity/            # TypeORM 엔티티
│           └── migration/          # DB 마이그레이션
├── config/                          # 전역 설정 (Step 1 완료)
└── app/                             # 애플리케이션 루트
```

## 🔍 도메인 계층 핵심 특징

### 1. 순수성 (Purity)

- 외부 의존성 없음 (NestJS 데코레이터 제외)
- 프레임워크 독립적인 비즈니스 로직
- 테스트하기 쉬운 구조

### 2. 불변성 (Immutability)

- 값 객체는 생성 후 변경 불가
- 엔티티 상태 변경은 메서드를 통해서만

### 3. 타입 안전성 (Type Safety)

- 원시 타입 대신 값 객체 사용
- 컴파일 타임 타입 검증
- 런타임 유효성 검증

### 4. 비즈니스 규칙 중심

- 도메인 엔티티에 비즈니스 로직 집중
- 도메인 서비스로 복잡한 로직 분리
- 예외를 통한 비즈니스 규칙 위반 처리

### 5. 확장성

- 새로운 인증 제공자 쉽게 추가 가능
- 비밀번호 정책 확장 가능
- 사용자 상태 확장 가능

### 6. 보안성 (Security) ✨

- **평문 비밀번호 완전 제거**: User 엔티티에서 평문 비밀번호 저장 금지
- **해시만 저장**: 오직 bcrypt 해시된 비밀번호만 저장
- **도메인 서비스 통한 해싱**: 평문 비밀번호는 도메인 서비스에서만 처리
- **메모리 보안**: 평문 비밀번호가 엔티티에 잔존하지 않음
- **타입 안전성**: Password 값 객체는 생성/검증 시에만 사용

## 🔒 보안 아키텍처 개선사항

### Before (보안 취약)

```typescript
// ❌ User 엔티티에 평문 비밀번호와 해시가 함께 존재
interface UserProps {
	password?: Password; // 평문 비밀번호 (위험!)
	passwordHash?: string; // 해시된 비밀번호
}
```

### After (보안 강화) ✅

```typescript
// ✅ User 엔티티에는 오직 해시만 저장
interface CreateUserProps {
	passwordHash?: string; // 해시된 비밀번호만 저장
}

// ✅ 평문 비밀번호는 도메인 서비스에서만 처리
class UserDomainService {
	async createLocalUser(email: Email, password: Password) {
		// 1. 평문 비밀번호를 즉시 해싱
		const hashedPassword = await this.hashPassword(password);

		// 2. User 엔티티에는 해시만 전달
		const user = User.create({
			email,
			passwordHash: hashedPassword, // 해시만 저장
		});
	}
}
```

### 보안 장점

1. **메모리 보안**: 평문 비밀번호가 엔티티에 잔존하지 않음
2. **직렬화 보안**: `toJSON()` 등에서 평문 비밀번호 노출 방지
3. **데이터베이스 보안**: DB에는 해시만 저장
4. **코드 안전성**: 컴파일 타임에 평문 비밀번호 사용 방지

## 🎯 다음 단계 (Step 3: 애플리케이션 계층)

구현 예정:

1. **애플리케이션 서비스**

   - `src/auth/application/service/auth.service.ts`
   - `src/auth/application/service/user.service.ts`
   - `src/auth/application/service/jwt.service.ts`

2. **애플리케이션 DTO**

   - `src/auth/application/dto/auth.dto.ts`
   - `src/auth/application/dto/user.dto.ts`

3. **도메인 이벤트**
   - `src/auth/application/event/user-registered.event.ts`
   - `src/auth/application/event/user-logged-in.event.ts`

## 🔧 필요한 추가 패키지

```bash
# bcrypt for password hashing
pnpm add bcrypt
pnpm add -D @types/bcrypt
```

## 🧪 단위 테스트 준비

도메인 계층은 외부 의존성이 없어 단위 테스트가 용이합니다:

- 값 객체 테스트 (유효성 검증, 불변성)
- 엔티티 테스트 (비즈니스 로직)
- 도메인 서비스 테스트 (복잡한 비즈니스 규칙)
- 예외 테스트 (에러 처리)




# 🎯 NestJS Clean Architecture Auth System - Step 3 완료 현황

## 📋 Step 3: 애플리케이션 계층 구현 개요

- **목표**: 애플리케이션 서비스, DTO, 도메인 이벤트 시스템 구현
- **원칙**: 도메인 계층을 활용한 비즈니스 로직 조율, 외부와의 인터페이스 정의
- **구조**: Application Service → DTO → Domain Event System

## ✅ Step 3: 애플리케이션 계층 완료 내역

### 1. 애플리케이션 DTO (Data Transfer Objects)

```typescript
// apps/auth-vC/src/auth/application/dto/

// auth.dto.ts                ✅ 인증 관련 DTO
-SignUpRequestDto - // 회원가입 요청
	LoginRequestDto - // 로그인 요청
	RefreshTokenRequestDto - // 토큰 갱신 요청
	AuthResponseDto - // 인증 응답
	UserInfoDto - // 사용자 정보
	TokenResponseDto - // 토큰 응답
	LogoutRequestDto - // 로그아웃 요청
	// user.dto.ts                ✅ 사용자 관련 DTO
	CreateUserDto - // 사용자 생성
	UpdateUserDto - // 사용자 업데이트
	ChangePasswordDto - // 비밀번호 변경
	GetUsersQueryDto - // 사용자 목록 조회
	UserDetailDto - // 사용자 상세 정보
	UsersResponseDto - // 사용자 목록 응답
	VerifyEmailDto - // 이메일 인증
	// social-auth.dto.ts         ✅ 소셜 인증 DTO
	SocialLoginRequestDto - // 소셜 로그인 요청
	SocialLoginCallbackDto - // 소셜 로그인 콜백
	SocialProfileDto - // 소셜 프로필
	GoogleUserInfoDto - // Google 사용자 정보
	AppleUserInfoDto - // Apple 사용자 정보
	LinkAccountRequestDto - // 계정 연결 요청
	UnlinkAccountRequestDto - // 계정 연결 해제
	SocialAccountDto; // 소셜 계정 정보
```

**주요 특징:**

- class-validator 데코레이터로 유효성 검증
- 명확한 입출력 타입 정의
- 페이지네이션 및 필터링 지원
- 보안을 위한 민감 정보 제외

### 2. 도메인 이벤트 시스템

#### 이벤트 클래스 (Event Classes)

```typescript
// apps/auth-vC/src/auth/application/event/event/

// user-registered.event.ts    ✅ 사용자 등록 이벤트
- 발생 시점: 회원가입 완료 시
- 포함 데이터: userId, email, provider, isEmailVerified, registeredAt

// user-logged-in.event.ts     ✅ 사용자 로그인 이벤트
- 발생 시점: 로그인 성공 시
- 포함 데이터: userId, email, ipAddress, userAgent, deviceInfo, loggedInAt

// user-deleted.event.ts       ✅ 사용자 삭제 이벤트
- 발생 시점: 계정 삭제 시
- 포함 데이터: userId, email, provider, deletedBy, reason, deletedAt
```

#### 이벤트 핸들러 (Event Handlers)

```typescript
// apps/auth-vC/src/auth/application/event/handler/

// user-registered.handler.ts  ✅ 등록 이벤트 핸들러
- 이메일 인증 메일 발송
- 환영 이메일 발송
- 사용자 등록 통계 업데이트
- 관리자에게 신규 가입 알림

// user-logged-in.handler.ts   ✅ 로그인 이벤트 핸들러
- 로그인 로그 기록
- 보안 검사 (비정상적 접근 감지)
- 의심스러운 활동 감지
- 로그인 알림 발송

// user-deleted.handler.ts     ✅ 삭제 이벤트 핸들러
- 사용자 관련 데이터 정리
- 외부 서비스 연동 해제
- 삭제 로그 기록 및 관리자 알림
- 데이터 아카이브 처리
```

### 3. 애플리케이션 서비스 (Application Services)

#### AuthApplicationService (인증 애플리케이션 서비스)

```typescript
// apps/auth-vC/src/auth/application/service/auth.service.ts ✅

주요 기능:
- signUp()           // 회원가입 처리 (도메인 서비스 활용, 이벤트 발행)
- login()            // 로그인 처리 (인증, 토큰 생성, 이벤트 발행)
- refreshToken()     // 토큰 갱신 (JWT 검증, DB 토큰 확인)
- logout()           // 로그아웃 (특정 토큰 무효화)
- logoutAll()        // 전체 로그아웃 (모든 토큰 삭제)
- getCurrentUser()   // 현재 사용자 정보 조회

구현 특징:
- 도메인 서비스를 통한 비즈니스 로직 처리
- 이벤트 발행으로 느슨한 결합
- JWT 서비스와 협력하여 토큰 관리
- 에러 처리 및 로깅
```

#### UserApplicationService (사용자 애플리케이션 서비스)

```typescript
// apps/auth-vC/src/auth/application/service/user.service.ts ✅

주요 기능:
- getUsers()         // 사용자 목록 조회 (페이지네이션, 필터링)
- getUserById()      // 특정 사용자 조회
- updateUser()       // 사용자 프로필 업데이트
- changePassword()   // 비밀번호 변경 (현재 비밀번호 검증)
- deleteUser()       // 사용자 계정 삭제 (소프트 삭제, 이벤트 발행)
- verifyEmail()      // 이메일 인증 처리
- getUserStats()     // 사용자 통계 조회

구현 특징:
- 페이지네이션 및 정렬 지원
- 도메인 서비스를 통한 비밀번호 변경
- 이벤트 기반 삭제 처리
- 통계 데이터 제공
```

#### PasswordApplicationService (비밀번호 애플리케이션 서비스)

```typescript
// apps/auth-vC/src/auth/application/service/password.service.ts ✅

주요 기능:
- forgotPassword()   // 비밀번호 찾기 (보안상 항상 성공 응답)
- resetPassword()    // 비밀번호 재설정 (토큰 검증, 새 비밀번호 설정)
- validatePasswordStrength()  // 비밀번호 강도 검증
- generateTemporaryPassword() // 임시 비밀번호 생성
- getPasswordPolicy()         // 비밀번호 정책 조회
- checkPasswordExpiry()       // 비밀번호 만료 확인

구현 특징:
- 보안 중심 설계 (토큰 기반 재설정)
- 비밀번호 정책 준수
- 도메인 서비스 활용
- 이메일 발송 로직 포함
```

#### SocialAuthApplicationService (소셜 인증 애플리케이션 서비스)

```typescript
// apps/auth-vC/src/auth/application/service/social-auth.service.ts ✅

주요 기능:
- socialLogin()      // 소셜 로그인 처리 (기존/신규 사용자 구분)
- linkAccount()      // 소셜 계정 연결
- unlinkAccount()    // 소셜 계정 연결 해제
- getLinkedAccounts() // 연결된 소셜 계정 목록
- generateAuthUrl()  // 소셜 로그인 URL 생성

구현 특징:
- Google, Apple 지원
- 계정 연결/해제 로직
- 프로필 정보 매핑
- 도메인 서비스와 협력
```

#### JwtApplicationService (JWT 애플리케이션 서비스)

```typescript
// apps/auth-vC/src/auth/application/service/jwt.service.ts ✅

주요 기능:
- generateAccessToken()    // Access Token 생성
- generateRefreshToken()   // Refresh Token 생성
- generateTokenPair()      // 토큰 쌍 생성
- verifyAccessToken()      // Access Token 검증
- verifyRefreshToken()     // Refresh Token 검증
- extractUserIdFromToken() // 토큰에서 사용자 ID 추출
- isTokenExpired()         // 토큰 만료 확인
- getAccessTokenExpiresIn() // Access Token TTL
- getRefreshTokenExpiresIn() // Refresh Token TTL

구현 특징:
- Access/Refresh 토큰 분리 관리
- 보안 강화 (issuer, audience 검증)
- TTL 관리 및 만료 검사
- 에러 처리 및 유효성 검증
```

### 4. 🔧 기술적 해결사항

#### JWT 서비스 데코레이터 문제 해결

```typescript
// ❌ 문제 발생 코드:
constructor(
  private readonly jwtService: NestJwtService,
  @Inject(jwtConfig.KEY)
  private readonly jwtConfiguration: ConfigType<typeof jwtConfig>  // 데코레이터 + 매개변수 프로퍼티
) {}

// ✅ 해결된 코드 (방법 1):
private readonly jwtConfiguration: ConfigType<typeof jwtConfig>;

constructor(
  private readonly jwtService: NestJwtService,
  @Inject(jwtConfig.KEY)
  jwtConfiguration: ConfigType<typeof jwtConfig>  // 데코레이터와 매개변수 분리
) {
  this.jwtConfiguration = jwtConfiguration;
}
```

**문제 원인:**

- TypeScript 컴파일러의 데코레이터 + 매개변수 프로퍼티 조합 해석 이슈
- NestJS의 `@Inject` 데코레이터와 생성자 매개변수 프로퍼티 간의 충돌

**해결 방법:**

- 데코레이터와 매개변수 프로퍼티 분리
- 수동 할당으로 타입 안전성과 NestJS 패턴 유지

### 5. 📁 완성된 애플리케이션 계층 구조

```
apps/auth-vC/src/auth/application/
├── service/                           # 애플리케이션 서비스
│   ├── auth.service.ts               ✅ 인증 서비스
│   ├── user.service.ts              ✅ 사용자 서비스
│   ├── password.service.ts          ✅ 비밀번호 서비스
│   ├── social-auth.service.ts       ✅ 소셜 인증 서비스
│   ├── jwt.service.ts               ✅ JWT 서비스
│   └── index.ts                     ✅ 서비스 export
├── dto/                              # 애플리케이션 DTO
│   ├── auth.dto.ts                  ✅ 인증 DTO
│   ├── user.dto.ts                  ✅ 사용자 DTO
│   ├── social-auth.dto.ts           ✅ 소셜 인증 DTO
│   └── index.ts                     ✅ DTO export
└── event/                            # 도메인 이벤트 시스템
    ├── event/                        # 이벤트 클래스
    │   ├── user-registered.event.ts  ✅ 등록 이벤트
    │   ├── user-logged-in.event.ts   ✅ 로그인 이벤트
    │   ├── user-deleted.event.ts     ✅ 삭제 이벤트
    │   └── index.ts                  ✅ 이벤트 export
    └── handler/                      # 이벤트 핸들러
        ├── user-registered.handler.ts ✅ 등록 핸들러
        ├── user-logged-in.handler.ts  ✅ 로그인 핸들러
        ├── user-deleted.handler.ts    ✅ 삭제 핸들러
        └── index.ts                   ✅ 핸들러 export
```

## 🎯 애플리케이션 계층 핵심 특징

### 1. 책임 분리 (Separation of Concerns)

- **애플리케이션 서비스**: 비즈니스 플로우 조율, 도메인 서비스 호출
- **DTO**: 데이터 전송 및 유효성 검증
- **이벤트 시스템**: 횡단 관심사 처리 (로깅, 알림, 통계)

### 2. 도메인 중심 설계

- 도메인 서비스를 활용한 핵심 비즈니스 로직 처리
- 도메인 예외를 통한 일관된 에러 처리
- 도메인 엔티티와 값 객체 활용

### 3. 이벤트 기반 아키텍처

- 느슨한 결합으로 확장성 향상
- 횡단 관심사의 독립적 처리
- 비동기 처리 지원 준비

### 4. 보안 중심 설계

- JWT 토큰 분리 관리 (Access/Refresh)
- 비밀번호 정책 및 강도 검증
- 보안 이벤트 추적 및 로깅

### 5. 확장 가능한 구조

- 새로운 소셜 로그인 제공자 쉽게 추가
- 추가적인 이벤트 및 핸들러 확장 가능
- 마이크로서비스 분리 준비

## 🔄 이벤트 플로우 예시

### 회원가입 플로우:

```
1. AuthApplicationService.signUp()
2. → UserDomainService.createLocalUser()
3. → User.create() (도메인 엔티티)
4. → UserRepository.save() (TODO: Step 4)
5. → EventEmitter.emit(UserRegisteredEvent)
6. → UserRegisteredHandler.handle()
   - 이메일 인증 발송
   - 환영 메시지 발송
   - 통계 업데이트
```

### 로그인 플로우:

```
1. AuthApplicationService.login()
2. → UserDomainService.authenticateUser()
3. → PasswordDomainService.verify()
4. → JwtApplicationService.generateTokenPair()
5. → RefreshTokenRepository.save() (TODO: Step 4)
6. → EventEmitter.emit(UserLoggedInEvent)
7. → UserLoggedInHandler.handle()
   - 로그인 로그 기록
   - 보안 검사
   - 알림 발송
```

## 🚀 완료된 기능들

### 🔐 인증 기능

- ✅ 이메일/비밀번호 회원가입
- ✅ 이메일/비밀번호 로그인
- ✅ JWT 토큰 기반 인증
- ✅ 토큰 갱신 (Refresh Token)
- ✅ 로그아웃 (단일/전체 디바이스)

### 👤 사용자 관리

- ✅ 사용자 프로필 조회/수정
- ✅ 비밀번호 변경
- ✅ 계정 삭제 (소프트 삭제)
- ✅ 이메일 인증
- ✅ 사용자 목록 조회 (페이지네이션)

### 🔑 비밀번호 관리

- ✅ 비밀번호 찾기
- ✅ 비밀번호 재설정
- ✅ 비밀번호 강도 검증
- ✅ 임시 비밀번호 생성
- ✅ 비밀번호 정책 관리

### 🌐 소셜 로그인

- ✅ Google 로그인 지원
- ✅ Apple 로그인 지원
- ✅ 소셜 계정 연결/해제
- ✅ 연결된 계정 관리

### 📊 이벤트 시스템

- ✅ 사용자 등록 이벤트 처리
- ✅ 로그인 추적 및 보안 검사
- ✅ 계정 삭제 후 정리 작업
- ✅ 확장 가능한 이벤트 핸들러 구조

## 📦 사용된 주요 패키지

```json
{
	"dependencies": {
		"@nestjs/common": "^10.0.0",
		"@nestjs/config": "^3.0.0",
		"@nestjs/event-emitter": "^2.0.0",
		"@nestjs/jwt": "^10.0.0",
		"class-validator": "^0.14.0",
		"class-transformer": "^0.5.0",
		"bcrypt": "^5.1.0"
	},
	"devDependencies": {
		"@types/bcrypt": "^5.0.0"
	}
}
```

## 🎯 다음 단계: Step 4 - 인프라스트럭처 계층

구현 예정:

### 1. 리포지토리 구현체

- `user.typeorm.repository.ts` - 사용자 데이터 영속성
- `refresh-token.typeorm.repository.ts` - 토큰 데이터 영속성

### 2. 외부 서비스

- `google-auth.service.ts` - Google OAuth 연동
- `apple-auth.service.ts` - Apple OAuth 연동
- `email.service.ts` - 이메일 발송 서비스

### 3. 보안 계층

- `jwt-auth.guard.ts` - JWT 인증 가드
- `refresh-token.guard.ts` - 리프레시 토큰 가드
- `optional-auth.guard.ts` - 선택적 인증 가드

### 4. Passport 전략

- `jwt.strategy.ts` - JWT 전략
- `refresh-token.strategy.ts` - 리프레시 토큰 전략
- `google.strategy.ts` - Google OAuth 전략
- `apple.strategy.ts` - Apple OAuth 전략

### 5. 설정 및 모듈

- `social-auth.config.ts` - 소셜 로그인 설정
- `auth-infrastructure.module.ts` - 인프라 모듈 설정

## 🔍 Step 3에서 얻은 교훈

1. **NestJS 데코레이터 패턴**: `@Inject`와 매개변수 프로퍼티 조합 시 주의 필요
2. **이벤트 기반 설계**: 횡단 관심사를 깔끔하게 분리 가능
3. **타입 안전성**: DTO와 도메인 객체 간의 명확한 변환 중요
4. **테스트 용이성**: 애플리케이션 서비스가 도메인 서비스를 활용하여 테스트하기 쉬운 구조
5. **확장성**: 새로운 기능 추가 시 기존 코드 수정 최소화

## 💡 베스트 프랙티스 정리

1. **서비스 분리**: 각 애플리케이션 서비스는 단일 책임 원칙 준수
2. **DTO 활용**: 입출력 데이터 검증 및 타입 안전성 확보
3. **이벤트 활용**: 부수 효과를 이벤트로 분리하여 결합도 낮춤
4. **에러 처리**: 도메인 예외를 활용한 일관된 에러 처리
5. **보안 고려**: 모든 인증/인가 로직에서 보안 검증 철저히 수행

---

**Step 3 애플리케이션 계층 구현이 성공적으로 완료되었습니다! 🎉**




# 🎯 NestJS Clean Architecture Auth System - Step 4 완료 현황

## 📋 Step 4: 인프라스트럭처 계층 구현 개요

- **목표**: 리포지토리 구현체, 외부 서비스, 보안 계층, 설정 관리 구현
- **원칙**: 도메인과 애플리케이션 계층의 인터페이스를 실제 기술 스택으로 구현
- **구조**: Repository Implementation → External Services → Security Guards → Configuration

## ✅ Step 4: 인프라스트럭처 계층 완료 내역

### 1. 리포지토리 구현체 (Database Layer)

```typescript
// apps/auth-vC/src/auth/infrastructure/database/repository/

// user.typeorm.repository.ts         ✅ 사용자 리포지토리 구현체
- TypeORM 기반 사용자 데이터 영속성 관리
- CRUD 기본 operations (save, findById, findByEmail, delete)
- 소셜 로그인 지원 (findByProviderAndProviderId)
- 페이지네이션 및 필터링 (findMany with options)
- 상태 관리 (updateStatus, updateLastLoginAt, updateEmailVerificationStatus)
- 통계 기능 (countByProvider, countActiveUsers)
- 도메인 엔티티 ↔ TypeORM 엔티티 변환

// refresh-token.typeorm.repository.ts ✅ 리프레시 토큰 리포지토리 구현체
- RefreshToken 데이터 영속성 관리
- 토큰 CRUD operations (save, findById, findByToken, delete)
- 사용자별 토큰 관리 (findActiveTokensByUserId, deleteAllByUserId)
- 디바이스별 토큰 관리 (findByUserIdAndDeviceInfo, deleteByUserIdAndDeviceInfo)
- 토큰 생명주기 관리 (deleteExpiredTokens, deactivateToken)
- 보안 기능 (countActiveTokensByUserId, deleteOldTokensByUserId)
- 토큰 사용 추적 (updateLastUsedAt)
```

#### 🔧 RefreshTokenRepository 주요 수정사항

```typescript
// 메서드명 수정 및 로직 개선
- findActiveByUserId() → findActiveTokensByUserId()  // 인터페이스 일치
- LessThan(new Date()) → MoreThan(new Date())        // 만료 토큰 → 활성 토큰 조회
- deleteByUserId() → deleteAllByUserId()             // 명확한 메서드명

// 누락된 메서드들 추가 구현
+ existsByToken(token: string): Promise<boolean>
+ deleteByUserIdAndDeviceInfo(userId: UserId, deviceInfo: string): Promise<void>
+ updateLastUsedAt(id: string, lastUsedAt: Date): Promise<void>
+ deactivateToken(id: string): Promise<void>
+ deleteOldTokensByUserId(userId: UserId, keepCount: number): Promise<number>

// 도메인 엔티티 메서드 호출 수정
- refreshToken.isActive() → refreshToken.getIsActive()  // 올바른 getter 사용
```

### 2. 외부 서비스 (External Services)

```typescript
// apps/auth-vC/src/auth/infrastructure/external-service/

// email.service.ts                   ✅ 이메일 발송 서비스
- 환영 이메일, 이메일 인증, 비밀번호 재설정 등 다양한 템플릿 지원
- 개발 환경: 콘솔 로그 출력으로 이메일 내용 확인
- 프로덕션 환경: 실제 이메일 발송 로직 (확장 준비)
- HTML 템플릿 기반 이메일 생성
- 보안 알림 및 로그인 알림 기능

// google-auth.service.ts             ✅ Google OAuth 서비스
- Google OAuth 2.0 플로우 지원
- 인증 URL 생성 (generateAuthUrl)
- 사용자 정보 조회 (getUserInfo)
- 개발 모드에서 목업 데이터 제공
- ConfigService 기반 설정 관리

// apple-auth.service.ts              ✅ Apple OAuth 서비스
- Apple Sign In 지원
- Apple ID 토큰 검증 (verifyIdentityToken)
- 사용자 정보 추출 (getUserInfo)
- Apple 인증 URL 생성
- 개발 모드 목업 데이터 지원
```

### 3. 보안 계층 (Security Guards)

```typescript
// apps/auth-vC/src/auth/infrastructure/guard/

// jwt-auth.guard.ts                  ✅ JWT 인증 가드
- Bearer 토큰 추출 및 검증
- @Public() 데코레이터 지원 (인증 우회)
- 토큰 만료/무효 에러 처리
- 사용자 정보를 request 객체에 주입
- 상세한 에러 메시지 제공

// refresh-token.guard.ts             ✅ 리프레시 토큰 가드
- 요청 body에서 refreshToken 추출
- 토큰 존재 여부 검증
- request 객체에 토큰 정보 저장
- 컨트롤러에서 토큰 사용 가능하도록 지원

// optional-auth.guard.ts             ✅ 선택적 인증 가드
- 토큰이 있으면 검증, 없어도 통과
- 공개 API와 인증 API 혼용 시 사용
- 토큰 유효성에 관계없이 요청 처리
- 사용자 정보가 있을 때만 context 제공
```

### 4. 설정 관리 (Configuration)

```typescript
// apps/auth-vC/src/auth/infrastructure/config/

// social-auth.config.ts              ✅ 소셜 로그인 설정
- Google OAuth 설정 (Client ID, Secret, Callback URL)
- Apple Sign In 설정 (Client ID, Team ID, Key ID, Private Key)
- 환경변수 기반 설정 관리
- 기본값 제공으로 개발 환경 지원
```

### 5. 인프라스트럭처 모듈 통합

```typescript
// auth-infrastructure.module.ts      ✅ 인프라 모듈 업데이트
imports: [
  TypeOrmModule.forFeature([UserTypeOrmEntity, RefreshTokenTypeOrmEntity]),
  ConfigModule.forFeature(socialAuthConfig),
],
providers: [
  // 리포지토리 구현체들
  UserTypeormRepository,
  RefreshTokenTypeormRepository,
  // 외부 서비스들
  EmailService,
  GoogleAuthService,
  AppleAuthService,
  // 가드들
  JwtAuthGuard,
  RefreshTokenGuard,
  OptionalAuthGuard,
],
exports: [
  // 모든 구성요소를 다른 모듈에서 사용할 수 있도록 export
]
```

### 6. 인덱스 파일 정리

```typescript
// 깔끔한 import/export 관리
database/repository/index.ts          ✅
external-service/index.ts             ✅
guard/index.ts                        ✅
```

## 📁 완성된 인프라스트럭처 계층 구조

```
apps/auth-vC/src/auth/infrastructure/
├── database/
│   ├── entity/                    # TypeORM 엔티티 (Step 1 완료)
│   │   ├── user.typeorm.entity.ts
│   │   └── refresh-token.typeorm.entity.ts
│   ├── repository/               # 리포지토리 구현체
│   │   ├── user.typeorm.repository.ts        ✅
│   │   ├── refresh-token.typeorm.repository.ts ✅ (수정 완료)
│   │   └── index.ts              ✅
│   └── migration/                # DB 마이그레이션 (Step 1 완료)
├── external-service/             # 외부 서비스
│   ├── email.service.ts          ✅
│   ├── google-auth.service.ts    ✅
│   ├── apple-auth.service.ts     ✅
│   └── index.ts                  ✅
├── guard/                        # 보안 가드
│   ├── jwt-auth.guard.ts         ✅
│   ├── refresh-token.guard.ts    ✅
│   ├── optional-auth.guard.ts    ✅
│   └── index.ts                  ✅
├── config/                       # 설정
│   └── social-auth.config.ts     ✅
└── auth-infrastructure.module.ts ✅ (업데이트 완료)
```

## 🎯 인프라스트럭처 계층 핵심 특징

### 1. 완전한 추상화 (Complete Abstraction)

- 도메인과 애플리케이션 계층이 외부 기술에 의존하지 않음
- 인터페이스 기반 의존성 주입으로 느슨한 결합
- 테스트 시 목업 구현체로 쉽게 교체 가능

### 2. 확장 가능성 (Extensibility)

- 새로운 소셜 로그인 제공자 쉽게 추가
- 다양한 이메일 서비스 제공자 지원 준비
- 추가적인 보안 정책 및 가드 확장 가능

### 3. 개발 친화성 (Developer Experience)

- 개발 환경에서 외부 서비스 없이도 동작
- 콘솔 로그를 통한 이메일 내용 확인
- 목업 데이터로 빠른 프로토타이핑 지원

### 4. 보안 중심 설계 (Security-First)

- JWT 토큰 검증 및 사용자 인증
- 다양한 인증 정책 지원 (필수/선택적)
- 토큰 생명주기 완전 관리
- 보안 이벤트 추적 및 로깅

### 5. 프로덕션 준비 (Production Ready)

- 실제 서비스 배포에 필요한 모든 구성요소 완성
- 환경별 설정 분리 및 관리
- 에러 처리 및 로깅 체계 구축
- 성능 최적화 (페이지네이션, 인덱스 활용)

## 🔧 주요 기술적 해결사항

### 1. TypeORM 매핑 최적화

- 도메인 엔티티 ↔ TypeORM 엔티티 변환 로직
- 복잡한 쿼리 조건 및 페이지네이션 처리
- 관계형 데이터 매핑 및 성능 최적화

### 2. 토큰 생명주기 관리

- 만료 토큰 자동 정리
- 디바이스별 토큰 관리
- 다중 세션 지원 및 제한

### 3. 보안 강화

- 토큰 검증 에러 상세 분류
- 공개/비공개 API 유연한 관리
- 사용자 컨텍스트 안전한 주입

## 🚀 완료된 전체 기능 현황

### 🔐 **인증 시스템**

- ✅ JWT Access Token / Refresh Token 분리 관리
- ✅ 토큰 검증 및 사용자 인증
- ✅ 토큰 갱신 및 만료 처리
- ✅ 다중 디바이스 로그인 지원

### 👤 **사용자 관리**

- ✅ 사용자 CRUD operations
- ✅ 이메일 인증 및 상태 관리
- ✅ 계정 활성화/비활성화
- ✅ 사용자 통계 및 검색

### 🌐 **소셜 로그인**

- ✅ Google OAuth 2.0 연동
- ✅ Apple Sign In 연동
- ✅ 소셜 계정 연결/해제
- ✅ 개발 모드 목업 지원

### 📧 **이메일 시스템**

- ✅ 다양한 이메일 템플릿 지원
- ✅ 개발/프로덕션 환경 분리
- ✅ HTML 템플릿 기반 이메일
- ✅ 보안 알림 및 로그인 알림

### 🛡️ **보안 계층**

- ✅ JWT 인증 가드
- ✅ 리프레시 토큰 가드
- ✅ 선택적 인증 가드
- ✅ 공개 API 지원

## 🔍 코드 품질 개선사항

### 1. Linter 준수 및 코드 스타일

- 모든 파일에서 일관된 코딩 스타일 적용
- TypeScript strict 모드 준수
- 명확한 타입 정의 및 인터페이스 활용

### 2. 에러 처리 강화

- 구체적인 에러 메시지 및 상태 코드
- 도메인 예외와 인프라 예외 분리
- 로깅 및 모니터링 지원

### 3. 테스트 준비

- 인터페이스 기반 구현으로 테스트 용이성 확보
- 목업 구현체로 단위 테스트 지원
- 통합 테스트를 위한 구조 준비

## 📦 필요한 패키지 정리

```json
{
	"dependencies": {
		"@nestjs/common": "^10.0.0",
		"@nestjs/config": "^3.0.0",
		"@nestjs/jwt": "^10.0.0",
		"@nestjs/typeorm": "^10.0.0",
		"typeorm": "^0.3.0",
		"class-validator": "^0.14.0",
		"class-transformer": "^0.5.0"
	},
	"devDependencies": {
		"@types/node": "^20.0.0"
	}
}
```

## 🎯 다음 단계: Step 5 - 프레젠테이션 계층

구현 예정:

### 1. **컨트롤러 계층**

- `auth.controller.ts` - 인증 API 엔드포인트
- `user.controller.ts` - 사용자 관리 API
- `social-auth.controller.ts` - 소셜 로그인 API

### 2. **요청/응답 DTO**

- 요청 DTO (signup, login, refresh 등)
- 응답 DTO (사용자 정보, 토큰 등)
- 유효성 검증 및 변환

### 3. **커스텀 데코레이터**

- `@CurrentUser()` - 현재 사용자 정보 주입
- `@Public()` - 공개 API 표시
- `@Roles()` - 역할 기반 접근 제어

### 4. **예외 필터**

- 도메인 예외 → HTTP 응답 변환
- 일관된 에러 응답 형식
- 로깅 및 모니터링 연동

### 5. **인터셉터**

- 응답 데이터 변환 및 래핑
- 요청/응답 로깅
- 성능 모니터링

## 💡 Step 4에서 얻은 교훈

1. **인터페이스 일치의 중요성**: 도메인 리포지토리 인터페이스와 구현체의 메서드 시그니처 정확한 일치 필요
2. **도메인 엔티티 메서드 호출**: getter 메서드명 정확한 사용 (isActive() vs getIsActive())
3. **비즈니스 로직 vs 데이터 로직**: 만료 토큰 조회 시 비즈니스 의미에 맞는 조건 설정
4. **개발 경험 최적화**: 개발 환경에서 외부 의존성 없이 동작하는 목업 구현
5. **보안 계층 설계**: 다양한 인증 요구사항을 지원하는 유연한 가드 시스템

## 🔮 확장 계획

1. **추가 소셜 로그인**: GitHub, Facebook, Kakao 등
2. **이메일 서비스 연동**: SendGrid, AWS SES, Mailgun 등
3. **캐싱 계층**: Redis 기반 세션 및 토큰 캐싱
4. **모니터링**: 로그 수집 및 메트릭 추적
5. **테스트 커버리지**: 단위/통합/E2E 테스트 완성

---

**Step 4 인프라스트럭처 계층 구현이 성공적으로 완료되었습니다! 🎉**

- **총 구현 파일**: 12개 (리포지토리 2개, 외부서비스 3개, 가드 3개, 설정 1개, 모듈 1개, 인덱스 3개)
- **핵심 기능**: 완전한 데이터 영속성, 외부 서비스 연동, 보안 계층 구축
- **아키텍처 원칙**: 의존성 역전, 인터페이스 분리, 단일 책임 준수
- **다음 단계**: Step 5 프레젠테이션 계층으로 전체 시스템 완성



